{"version":3,"sources":["components/Category.js","components/Carousel.js","components/Modal.js","components/MainList.js","App.js","serviceWorker.js","index.js"],"names":["Category","props","sendCategory","setState","category","name","onSelectCategory","state","className","onClick","this","React","Component","CarouselBox","buildCarousel","list","i","gifs","length","item","push","Carousel","Item","key","alt","src","images","fixed_height","url","interval","ModalBox","renderCarousel","showSpinner","Spinner","animation","role","size","Modal","aria-labelledby","Header","closeButton","Title","id","Body","Footer","Button","onHide","MainList","createList","categories","hideModal","addModalShow","showModalSpinner","getGifs","URL","params","api_key","q","limit","rating","offset","getRandomNumber","lang","Object","keys","forEach","searchParams","append","fetch","then","data","json","rsp","show","min","max","Math","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3bc8868.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Category extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      category: ''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"option-container\" onClick={this.sendCategory}>\r\n          {this.props.name}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  sendCategory = () => {\r\n    this.setState({category: this.props.name})\r\n    this.props.onSelectCategory(this.props.name)\r\n  }\r\n}\r\nexport default Category;","import React from 'react';\r\nimport {Carousel} from 'react-bootstrap'\r\n\r\nclass CarouselBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            interval: null,\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Carousel interval={this.state.interval}>\r\n                {this.buildCarousel()}\r\n            </Carousel>  \r\n        );\r\n    }\r\n\r\n    buildCarousel = () => {\r\n        let list = [];\r\n        for (let i = 0; i < this.props.gifs.length; i++) {\r\n            let item = this.props.gifs[i];\r\n            list.push (\r\n                <Carousel.Item key={i} >\r\n                <img\r\n                    className=\"img-fluid\"\r\n                    alt={this.props.category}\r\n                    src={item.images.fixed_height.url}\r\n                />\r\n                </Carousel.Item>\r\n            );\r\n        }\r\n        return list;\r\n    }\r\n}\r\nexport default CarouselBox;","import React from 'react';\r\nimport {Modal, Button, Spinner} from 'react-bootstrap';\r\nimport CarouselBox from './Carousel';\r\n\r\nclass ModalBox extends React.Component {\r\n    render() {\r\n        return (\r\n            <Modal {...this.props} aria-labelledby=\"contained-modal-title-vcenter\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Funny gifs of {this.props.category}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"d-flex justify-content-center\">\r\n                    {this.renderCarousel()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button  onClick={this.props.onHide}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderCarousel = () => {\r\n        if(this.props.showSpinner) {\r\n            return (\r\n            <Spinner animation=\"grow\" role=\"status\" size=\"lg\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>);\r\n        }else if (this.props.gifs.length == 0) {\r\n            return (<span>No animals found :(</span>)\r\n        }\r\n        return (\r\n            <CarouselBox gifs={this.props.gifs} category={this.props.category}>\r\n            </CarouselBox>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalBox;","import React from 'react';\r\nimport Category from './Category';\r\nimport ModalBox from './Modal';\r\n\r\nclass MainList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.categories = ['Cats', 'Dogs', 'Elephants', 'Lions', 'Monkeys', 'Koala', 'swan']\r\n    this.state = {\r\n      addModalShow: false, \r\n      category: '',\r\n      showModalSpinner: true,\r\n      gifs : []\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.createList()}\r\n        <ModalBox \r\n          show={this.state.addModalShow}\r\n          category={this.state.category}\r\n          onHide={this.hideModal}\r\n          showSpinner={this.state.showModalSpinner}\r\n          gifs={this.state.gifs}\r\n          ></ModalBox>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createList = () => {\r\n    let list = [];\r\n    for (let i = 0; i < this.categories.length; i++) {\r\n      list.push(\r\n        <Category key={i} name={this.categories[i]} onSelectCategory={this.onSelectCategory}>\r\n        </Category>\r\n      );\r\n    }\r\n    return list;\r\n  }\r\n  \r\n  hideModal = () => {\r\n    this.setState({addModalShow: false})\r\n  }\r\n\r\n  onSelectCategory = (category) => {\r\n    this.setState({addModalShow: true, category, showModalSpinner: true, gifs: []})\r\n    this.getGifs(category);\r\n  }\r\n\r\n  getGifs = (category) => {\r\n    let url = new URL(\"https://api.giphy.com/v1/gifs/search\"),\r\n    params = {\r\n      api_key:'l0V0L7xF5G4T9ZR0rY6x4ZWR9R9dZLuq', \r\n      q: category, \r\n      limit: 10,\r\n      rating: 'g',\r\n      offset: this.getRandomNumber(0, 100), \r\n      lang: 'en'\r\n    };\r\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\r\n    fetch(url).then( (data) => {\r\n      data.json().then((rsp) => {\r\n        this.setState( {showModalSpinner: false, gifs: rsp.data})\r\n      })\r\n    })\r\n  }\r\n\r\n  getRandomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n}\r\nexport default MainList;","import React from 'react';\nimport './App.css';\nimport MainList from './components/MainList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid main-container\">\n          <div className=\"row mt-5 mb-5\">\n            <div className=\"col-md-12 d-flex justify-content-center align-items-center\">\n              <h1>\n                Choose an option to get fun :)\n              </h1>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12 d-flex justify-content-center align-items-center \">\n              <MainList>\n              </MainList>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}